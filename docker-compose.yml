# Docker Compose for Telegram Trading Bot
version: '3.8'

services:
  # Production service
  tg-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: telegram-trading-bot
    restart: unless-stopped
    environment:
      # Required environment variables
      - NODE_ENV=production
      - TG_TOKEN=${TG_TOKEN}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Optional environment variables
      - SERPAPI_KEY=${SERPAPI_KEY}
      - SYSTEM_PROMPT=${SYSTEM_PROMPT}
      - PORT=3000
      
      # Hyperliquid configuration
      - HYPERLIQUID_API_URL=${HYPERLIQUID_API_URL:-https://api.hyperliquid.xyz}
      - HYPERLIQUID_TIMEOUT=${HYPERLIQUID_TIMEOUT:-10000}
    ports:
      - "3000:3000"
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Development service with hot reload
  tg-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: telegram-trading-bot-dev
    environment:
      - NODE_ENV=development
      - TG_TOKEN=${TG_TOKEN}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SERPAPI_KEY=${SERPAPI_KEY}
      - SYSTEM_PROMPT=${SYSTEM_PROMPT}
      - PORT=3000
      - HYPERLIQUID_API_URL=${HYPERLIQUID_API_URL:-https://api.hyperliquid-testnet.xyz}
      - HYPERLIQUID_TIMEOUT=${HYPERLIQUID_TIMEOUT:-10000}
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - bot-network
    profiles:
      - dev

networks:
  bot-network:
    driver: bridge

volumes:
  logs:
    driver: local